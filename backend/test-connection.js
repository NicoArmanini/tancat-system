/**
 * Script de conexi√≥n CORREGIDO para Supabase
 * Ejecutar con: node test-connection-fixed.js
 */

require('dotenv').config();
const { Pool } = require('pg');
const { createClient } = require('@supabase/supabase-js');

console.log('üß™ Probando conexi√≥n a Supabase (VERSI√ìN CORREGIDA)...\n');

// ====================================
// MOSTRAR CONFIGURACI√ìN
// ====================================
console.log('üìã Configuraci√≥n actual:');
console.log(`   SUPABASE_URL: ${process.env.SUPABASE_URL || '‚ùå NO CONFIGURADA'}`);
console.log(`   DB_HOST: ${process.env.DB_HOST || '‚ùå NO CONFIGURADO'}`);
console.log(`   DB_PASSWORD: ${process.env.DB_PASSWORD ? '‚úÖ CONFIGURADA' : '‚ùå NO CONFIGURADA'}`);
console.log('');

// ====================================
// PROBAR POSTGRESQL CON CONSULTAS B√ÅSICAS
// ====================================
async function testPostgreSQLBasic() {
    console.log('üêò Probando PostgreSQL con consultas b√°sicas...');
    
    try {
        const pool = new Pool({
            host: process.env.DB_HOST,
            port: 5432,
            database: 'postgres',
            user: 'postgres',
            password: process.env.DB_PASSWORD,
            ssl: { rejectUnauthorized: false },
            connectionTimeoutMillis: 10000
        });
        
        // Prueba 1: Consulta b√°sica de tiempo
        console.log('   üìÖ Probando consulta de tiempo...');
        const timeResult = await pool.query('SELECT NOW() as current_time');
        console.log(`   ‚úÖ Tiempo del servidor: ${timeResult.rows[0].current_time}`);
        
        // Prueba 2: Verificar si tenemos acceso a informaci√≥n del esquema
        console.log('   üîç Probando acceso a informaci√≥n del esquema...');
        const schemaResult = await pool.query(`
            SELECT schema_name 
            FROM information_schema.schemata 
            WHERE schema_name IN ('public', 'auth', 'storage')
            ORDER BY schema_name
        `);
        console.log(`   ‚úÖ Esquemas encontrados: ${schemaResult.rows.map(r => r.schema_name).join(', ')}`);
        
        // Prueba 3: Verificar tablas existentes en el esquema public
        console.log('   üìã Probando acceso a tablas...');
        const tablesResult = await pool.query(`
            SELECT table_name 
            FROM information_schema.tables 
            WHERE table_schema = 'public' 
            ORDER BY table_name
            LIMIT 10
        `);
        
        if (tablesResult.rows.length > 0) {
            console.log(`   ‚úÖ Tablas encontradas: ${tablesResult.rows.map(r => r.table_name).join(', ')}`);
        } else {
            console.log('   ‚ÑπÔ∏è  No hay tablas en el esquema p√∫blico (esto es normal en un proyecto nuevo)');
        }
        
        // Prueba 4: Crear una tabla de prueba
        console.log('   üß™ Probando creaci√≥n de tabla...');
        await pool.query(`
            CREATE TABLE IF NOT EXISTS test_tancat (
                id SERIAL PRIMARY KEY,
                mensaje TEXT,
                created_at TIMESTAMP DEFAULT NOW()
            )
        `);
        console.log('   ‚úÖ Tabla de prueba creada exitosamente');
        
        // Prueba 5: Insertar y leer datos
        console.log('   üíæ Probando inserci√≥n de datos...');
        await pool.query(`
            INSERT INTO test_tancat (mensaje) 
            VALUES ('Conexi√≥n TANCAT exitosa - ${new Date().toISOString()}')
        `);
        
        const testData = await pool.query('SELECT * FROM test_tancat ORDER BY created_at DESC LIMIT 1');
        console.log(`   ‚úÖ Dato insertado: ${testData.rows[0].mensaje}`);
        
        // Limpiar tabla de prueba
        await pool.query('DROP TABLE IF EXISTS test_tancat');
        console.log('   üóëÔ∏è  Tabla de prueba eliminada');
        
        await pool.end();
        
        console.log('‚úÖ PostgreSQL: TODAS LAS PRUEBAS EXITOSAS');
        return true;
        
    } catch (error) {
        console.log('‚ùå PostgreSQL: FALL√ì');
        console.log(`   Error: ${error.message}`);
        console.log(`   C√≥digo: ${error.code}`);
        
        // Diagn√≥sticos espec√≠ficos
        if (error.code === 'ENOTFOUND') {
            console.log('   üí° Soluci√≥n: Verificar DB_HOST en .env');
        } else if (error.code === '28P01') {
            console.log('   üí° Soluci√≥n: Verificar DB_PASSWORD en .env');
        } else if (error.code === '3D000') {
            console.log('   üí° Soluci√≥n: La base de datos no existe');
        } else if (error.message.includes('timeout')) {
            console.log('   üí° Soluci√≥n: Verificar conexi√≥n a internet / firewall');
        }
        
        return false;
    }
}

// ====================================
// PROBAR SUPABASE CLIENT CON CONSULTAS APROPIADAS
// ====================================
async function testSupabaseClientFixed() {
    console.log('üîó Probando Supabase Client...');
    
    try {
        if (!process.env.SUPABASE_URL || !process.env.SUPABASE_SERVICE_ROLE_KEY) {
            throw new Error('Variables de Supabase no configuradas completamente');
        }
        
        const supabase = createClient(
            process.env.SUPABASE_URL,
            process.env.SUPABASE_SERVICE_ROLE_KEY
        );
        
        // Prueba con una consulta m√°s b√°sica usando SQL directo
        console.log('   üîç Probando consulta SQL b√°sica...');
        const { data, error } = await supabase.rpc('get_current_timestamp', {});
        
        if (error && error.message.includes('does not exist')) {
            // Si no existe la funci√≥n, crear una consulta m√°s simple
            console.log('   üîÑ Probando consulta alternativa...');
            
            // Usar una consulta SQL directa m√°s b√°sica
            const { data: timeData, error: timeError } = await supabase
                .from('information_schema.tables')
                .select('table_name')
                .limit(1);
            
            if (timeError) {
                throw timeError;
            }
            
            console.log('   ‚úÖ Supabase Client conectado correctamente');
        } else if (error) {
            throw error;
        } else {
            console.log('   ‚úÖ Supabase Client: funci√≥n RPC funciona');
        }
        
        return true;
        
    } catch (error) {
        console.log('‚ùå Supabase Client: FALL√ì');
        console.log(`   Error: ${error.message}`);
        
        // Pero esto no es cr√≠tico si PostgreSQL directo funciona
        console.log('   ‚ÑπÔ∏è  Nota: El cliente Supabase no es cr√≠tico si PostgreSQL directo funciona');
        return false;
    }
}

// ====================================
// CREAR ESTRUCTURA B√ÅSICA DE TANCAT
// ====================================
async function createTancatStructure() {
    console.log('üèóÔ∏è  Creando estructura b√°sica de TANCAT...');
    
    try {
        const pool = new Pool({
            host: process.env.DB_HOST,
            port: 5432,
            database: 'postgres',
            user: 'postgres',
            password: process.env.DB_PASSWORD,
            ssl: { rejectUnauthorized: false }
        });
        
        // Crear tabla de roles
        await pool.query(`
            CREATE TABLE IF NOT EXISTS roles (
                id_rol SERIAL PRIMARY KEY,
                nombre VARCHAR(50) NOT NULL UNIQUE,
                descripcion TEXT,
                permisos JSONB DEFAULT '{}',
                created_at TIMESTAMP DEFAULT NOW()
            )
        `);
        console.log('   ‚úÖ Tabla roles creada');
        
        // Crear tabla de empleados
        await pool.query(`
            CREATE TABLE IF NOT EXISTS empleados (
                id_empleado SERIAL PRIMARY KEY,
                nombre VARCHAR(100) NOT NULL,
                apellido VARCHAR(100) NOT NULL,
                email VARCHAR(150) UNIQUE NOT NULL,
                password_hash VARCHAR(255) NOT NULL,
                id_rol INTEGER REFERENCES roles(id_rol),
                activo BOOLEAN DEFAULT true,
                created_at TIMESTAMP DEFAULT NOW()
            )
        `);
        console.log('   ‚úÖ Tabla empleados creada');
        
        // Insertar rol de administrador si no existe
        const adminRole = await pool.query('SELECT id_rol FROM roles WHERE nombre = $1', ['Administrador']);
        
        if (adminRole.rows.length === 0) {
            await pool.query(`
                INSERT INTO roles (nombre, descripcion, permisos) 
                VALUES ($1, $2, $3)
            `, [
                'Administrador',
                'Acceso completo al sistema TANCAT',
                JSON.stringify({ all: true })
            ]);
            console.log('   ‚úÖ Rol Administrador creado');
        }
        
        // Insertar usuario administrador si no existe
        const adminUser = await pool.query('SELECT id_empleado FROM empleados WHERE email = $1', ['admin@tancat.com']);
        
        if (adminUser.rows.length === 0) {
            const bcrypt = require('bcryptjs');
            const hashedPassword = await bcrypt.hash('admin123', 12);
            
            const roleResult = await pool.query('SELECT id_rol FROM roles WHERE nombre = $1', ['Administrador']);
            
            await pool.query(`
                INSERT INTO empleados (nombre, apellido, email, password_hash, id_rol) 
                VALUES ($1, $2, $3, $4, $5)
            `, [
                'Admin',
                'TANCAT',
                'admin@tancat.com',
                hashedPassword,
                roleResult.rows[0].id_rol
            ]);
            console.log('   ‚úÖ Usuario administrador creado');
            console.log('   üìß Email: admin@tancat.com');
            console.log('   üîê Password: admin123');
        }
        
        await pool.end();
        
        console.log('‚úÖ Estructura TANCAT creada exitosamente');
        return true;
        
    } catch (error) {
        console.log('‚ùå Error creando estructura TANCAT:', error.message);
        return false;
    }
}

// ====================================
// EJECUTAR TODAS LAS PRUEBAS
// ====================================
async function runAllTests() {
    console.log('üöÄ Iniciando pruebas corregidas...\n');
    
    const postgresOk = await testPostgreSQLBasic();
    console.log('');
    
    const supabaseOk = await testSupabaseClientFixed();
    console.log('');
    
    let structureOk = false;
    if (postgresOk) {
        structureOk = await createTancatStructure();
        console.log('');
    }
    
    // Resumen final
    console.log('üéØ RESUMEN FINAL:');
    console.log(`   PostgreSQL B√°sico: ${postgresOk ? '‚úÖ FUNCIONANDO' : '‚ùå FALLA'}`);
    console.log(`   Supabase Client: ${supabaseOk ? '‚úÖ FUNCIONANDO' : '‚ö†Ô∏è  NO CR√çTICO'}`);
    console.log(`   Estructura TANCAT: ${structureOk ? '‚úÖ CREADA' : '‚ùå FALLA'}`);
    
    if (postgresOk && structureOk) {
        console.log('\nüéâ ¬°CONEXI√ìN EXITOSA!');
        console.log('üí° Tu base de datos est√° lista para TANCAT');
        console.log('üöÄ Ya puedes ejecutar: npm run dev');
        console.log('\nüîê Credenciales para login:');
        console.log('   üìß Email: admin@tancat.com');
        console.log('   üîë Password: admin123');
    } else {
        console.log('\nüîß PR√ìXIMOS PASOS:');
        if (!postgresOk) {
            console.log('   1. Verificar credenciales de PostgreSQL en .env');
            console.log('   2. Asegurar que el proyecto Supabase est√© activo');
            console.log('   3. Revisar configuraci√≥n de firewall/red');
        }
    }
    
    process.exit(postgresOk ? 0 : 1);
}

// Ejecutar
runAllTests().catch(error => {
    console.error('üí• Error fatal:', error);
    process.exit(1);
});